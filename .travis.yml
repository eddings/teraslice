sudo: required
language: node_js
node_js:
- '8'
addons:
  apt:
    packages:
      - docker-ce
      - jq
services:
  - docker
  - elasticsearch
cache: yarn
before_install:
  # install latest docker-compose
  - sudo rm /usr/local/bin/docker-compose
  - curl -L https://github.com/docker/compose/releases/download/1.22.0/docker-compose-`uname -s`-`uname -m` > docker-compose
  - chmod +x docker-compose
  - sudo mv docker-compose /usr/local/bin
  # install latest yarn
  - curl -o- -L https://yarnpkg.com/install.sh | bash
  - export PATH="$HOME/.yarn/bin:$PATH"
  # make it colorful
  - export FORCE_COLOR=1
install:
  - yarn install
  - yarn setup
before_deploy:
jobs:
  # stop if given a reason
  fast-finish: true
  include:
  # tests only on master and on pull-request
  - stage: Tests
    name: Test Packages
    if: branch = master
    script: yarn test
    after_success:
      - yarn lint
      - bash <(curl -s https://codecov.io/bash)

  # test end-to-end tests, only on pull-requests
  - script:
    name: End-to-End Tests
    if: branch = master AND type = pull_request
    script: yarn test:e2e || (yarn test:e2e:logs; exit 1)

  # if not tag is preset and is on master release a draft version
  - stage: Release (NPM)
    name: Release
    if: tag IS blank AND branch = master AND type != pull_request
    before_install: npm config set //registry.npmjs.org/:_authToken=${NPM_TOKEN} -q
    script: skip
    deploy:
      - provider: script
        skip_cleanup: true
        script: yarn publish:changed

  # if tag is present and is on master, release a new version
  - stage: Release (Github)
    name: Release
    if: tag IS present AND tag =~ ^v AND branch = master AND type != pull_request
    before_install: skip
    script: skip
    deploy:
      - provider: releases
        name: "$TRAVIS_TAG"
        prerelease: true
        api_key:
          secure: "ikJIrNiYXy2kd2WvFMvG8zkKUI5uXUVTG1OJ9E7pQPRbp5tqmCsko9AQVx+51ChWi5a25CFbkhhG6FGZoukU9i70QyZ5WuQUFmjLrdSjjCw9uVPd9G+n0CyDUaFbRTsqY4gkt0E6Zb6P3ULpex5DU55Nvn+lhRkHxYKsQSSTVEe1tF7jdvaSXruCxRVssnc/goN8x43POS9veouC5of3nvUhUX/7mo4qER7P2vhm3yh5hjbf22+seNKcxP99dTrrVO9Cm2m9B41RW3p7tdzVrZ7q8RUdmPiY/SG/Al+8W2mj9NTOTd78JH6016GK/7gdiHbFungUbz0tYYizrNP6RahaZVRtUnz0nJMYtIEe2l7q/UStV2TlGngQAummxOhmBbrh7fjfSm+uu6SnKlhghicBIR91kscNpMHeCuhHXTedNZd/VD4zZFDUqTP0yLM+5toQByK7n9zg4CBdfTlJ8cC0ikf97xxr/KE5uK7gFOpNfC1z4nW4Ir+c9k8Xf97rT+kz26JzoN+BWxHGa1DlTCwpuTWz51+cgWG9w2OtUvWz3JdRpPb7sFQtCswiS+TkHtz/r9JKKmIMDnFhx4GAJbSfFxKM/KMvDOeMrRVbI6TVuzCa1aH1oLipXz6tFOQRDPCX80HIxloWYpYr/YofpvEeYiJkRMsEgrpVDJuHpq0="
